// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvraft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kvraft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kvraft {

namespace {

const ::google::protobuf::Descriptor* Op_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Op_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Op_OpName_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVoteArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVoteArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVoteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVoteReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kvraft_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_kvraft_2eproto() {
  protobuf_AddDesc_kvraft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kvraft.proto");
  GOOGLE_CHECK(file != NULL);
  Op_descriptor_ = file->message_type(0);
  static const int Op_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, value_),
  };
  Op_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Op_descriptor_,
      Op::default_instance_,
      Op_offsets_,
      -1,
      -1,
      -1,
      sizeof(Op),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, _is_default_instance_));
  Op_OpName_descriptor_ = Op_descriptor_->enum_type(0);
  LogEntry_descriptor_ = file->message_type(1);
  static const int LogEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, term_),
  };
  LogEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogEntry_descriptor_,
      LogEntry::default_instance_,
      LogEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _is_default_instance_));
  RequestVoteArgs_descriptor_ = file->message_type(2);
  static const int RequestVoteArgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteArgs, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteArgs, candidateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteArgs, lastlogindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteArgs, lastlogterm_),
  };
  RequestVoteArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestVoteArgs_descriptor_,
      RequestVoteArgs::default_instance_,
      RequestVoteArgs_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestVoteArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteArgs, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteArgs, _is_default_instance_));
  RequestVoteReply_descriptor_ = file->message_type(3);
  static const int RequestVoteReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteReply, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteReply, votegranted_),
  };
  RequestVoteReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestVoteReply_descriptor_,
      RequestVoteReply::default_instance_,
      RequestVoteReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestVoteReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteReply, _is_default_instance_));
  AppendEntriesArgs_descriptor_ = file->message_type(4);
  static const int AppendEntriesArgs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesArgs, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesArgs, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesArgs, prevlogindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesArgs, prevlogterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesArgs, leadercommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesArgs, entries_),
  };
  AppendEntriesArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppendEntriesArgs_descriptor_,
      AppendEntriesArgs::default_instance_,
      AppendEntriesArgs_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppendEntriesArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesArgs, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesArgs, _is_default_instance_));
  AppendEntriesReply_descriptor_ = file->message_type(5);
  static const int AppendEntriesReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReply, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReply, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReply, replicatedindex_),
  };
  AppendEntriesReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppendEntriesReply_descriptor_,
      AppendEntriesReply::default_instance_,
      AppendEntriesReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppendEntriesReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kvraft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Op_descriptor_, &Op::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogEntry_descriptor_, &LogEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestVoteArgs_descriptor_, &RequestVoteArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestVoteReply_descriptor_, &RequestVoteReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppendEntriesArgs_descriptor_, &AppendEntriesArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppendEntriesReply_descriptor_, &AppendEntriesReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kvraft_2eproto() {
  delete Op::default_instance_;
  delete Op_reflection_;
  delete LogEntry::default_instance_;
  delete LogEntry_reflection_;
  delete RequestVoteArgs::default_instance_;
  delete RequestVoteArgs_reflection_;
  delete RequestVoteReply::default_instance_;
  delete RequestVoteReply_reflection_;
  delete AppendEntriesArgs::default_instance_;
  delete AppendEntriesArgs_reflection_;
  delete AppendEntriesReply::default_instance_;
  delete AppendEntriesReply_reflection_;
}

void protobuf_AddDesc_kvraft_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_kvraft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014kvraft.proto\022\006kvraft\032\036google/protobuf/"
    "wrappers.proto\"E\n\002Op\022\013\n\003Key\030\001 \001(\t\022\r\n\005Val"
    "ue\030\002 \001(\t\"#\n\006OpName\022\007\n\003GET\020\000\022\007\n\003PUT\020\001\022\007\n\003"
    "DEL\020\002\"5\n\010LogEntry\022\033\n\007Command\030\001 \001(\0132\n.kvr"
    "aft.Op\022\014\n\004Term\030\002 \001(\005\"_\n\017RequestVoteArgs\022"
    "\014\n\004Term\030\001 \001(\005\022\023\n\013CandidateId\030\002 \001(\005\022\024\n\014La"
    "stLogIndex\030\003 \001(\005\022\023\n\013LastLogTerm\030\004 \001(\005\"5\n"
    "\020RequestVoteReply\022\014\n\004Term\030\001 \001(\005\022\023\n\013VoteG"
    "ranted\030\002 \001(\010\"\227\001\n\021AppendEntriesArgs\022\014\n\004Te"
    "rm\030\001 \001(\005\022\020\n\010LeaderId\030\002 \001(\005\022\024\n\014PrevLogInd"
    "ex\030\003 \001(\005\022\023\n\013PrevLogTerm\030\004 \001(\005\022\024\n\014LeaderC"
    "ommit\030\005 \001(\005\022!\n\007Entries\030\006 \003(\0132\020.kvraft.Lo"
    "gEntry\"L\n\022AppendEntriesReply\022\014\n\004Term\030\001 \001"
    "(\005\022\017\n\007Success\030\002 \001(\010\022\027\n\017ReplicatedIndex\030\003"
    " \001(\0052\222\001\n\006KVRaft\022@\n\013RequestVote\022\027.kvraft."
    "RequestVoteArgs\032\030.kvraft.RequestVoteRepl"
    "y\022F\n\rAppendEntries\022\031.kvraft.AppendEntrie"
    "sArgs\032\032.kvraft.AppendEntriesReplyb\006proto"
    "3", 721);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kvraft.proto", &protobuf_RegisterTypes);
  Op::default_instance_ = new Op();
  LogEntry::default_instance_ = new LogEntry();
  RequestVoteArgs::default_instance_ = new RequestVoteArgs();
  RequestVoteReply::default_instance_ = new RequestVoteReply();
  AppendEntriesArgs::default_instance_ = new AppendEntriesArgs();
  AppendEntriesReply::default_instance_ = new AppendEntriesReply();
  Op::default_instance_->InitAsDefaultInstance();
  LogEntry::default_instance_->InitAsDefaultInstance();
  RequestVoteArgs::default_instance_->InitAsDefaultInstance();
  RequestVoteReply::default_instance_->InitAsDefaultInstance();
  AppendEntriesArgs::default_instance_->InitAsDefaultInstance();
  AppendEntriesReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kvraft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kvraft_2eproto {
  StaticDescriptorInitializer_kvraft_2eproto() {
    protobuf_AddDesc_kvraft_2eproto();
  }
} static_descriptor_initializer_kvraft_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Op_OpName_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_OpName_descriptor_;
}
bool Op_OpName_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Op_OpName Op::GET;
const Op_OpName Op::PUT;
const Op_OpName Op::DEL;
const Op_OpName Op::OpName_MIN;
const Op_OpName Op::OpName_MAX;
const int Op::OpName_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Op::kKeyFieldNumber;
const int Op::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Op::Op()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvraft.Op)
}

void Op::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Op::Op(const Op& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvraft.Op)
}

void Op::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Op::~Op() {
  // @@protoc_insertion_point(destructor:kvraft.Op)
  SharedDtor();
}

void Op::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Op::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Op::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_descriptor_;
}

const Op& Op::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvraft_2eproto();
  return *default_instance_;
}

Op* Op::default_instance_ = NULL;

Op* Op::New(::google::protobuf::Arena* arena) const {
  Op* n = new Op;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Op::Clear() {
// @@protoc_insertion_point(message_clear_start:kvraft.Op)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Op::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvraft.Op)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvraft.Op.Key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // optional string Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvraft.Op.Value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvraft.Op)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvraft.Op)
  return false;
#undef DO_
}

void Op::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvraft.Op)
  // optional string Key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvraft.Op.Key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string Value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvraft.Op.Value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvraft.Op)
}

::google::protobuf::uint8* Op::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvraft.Op)
  // optional string Key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvraft.Op.Key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string Value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvraft.Op.Value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvraft.Op)
  return target;
}

int Op::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kvraft.Op)
  int total_size = 0;

  // optional string Key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string Value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Op::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvraft.Op)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Op* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Op>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvraft.Op)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvraft.Op)
    MergeFrom(*source);
  }
}

void Op::MergeFrom(const Op& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvraft.Op)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Op::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvraft.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Op::CopyFrom(const Op& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvraft.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Op::IsInitialized() const {

  return true;
}

void Op::Swap(Op* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Op::InternalSwap(Op* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Op::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Op_descriptor_;
  metadata.reflection = Op_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Op

// optional string Key = 1;
void Op::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Op::key() const {
  // @@protoc_insertion_point(field_get:kvraft.Op.Key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Op::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvraft.Op.Key)
}
 void Op::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.Op.Key)
}
 void Op::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.Op.Key)
}
 ::std::string* Op::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvraft.Op.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Op::release_key() {
  // @@protoc_insertion_point(field_release:kvraft.Op.Key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Op::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvraft.Op.Key)
}

// optional string Value = 2;
void Op::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Op::value() const {
  // @@protoc_insertion_point(field_get:kvraft.Op.Value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Op::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvraft.Op.Value)
}
 void Op::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.Op.Value)
}
 void Op::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.Op.Value)
}
 ::std::string* Op::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvraft.Op.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Op::release_value() {
  // @@protoc_insertion_point(field_release:kvraft.Op.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Op::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvraft.Op.Value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kCommandFieldNumber;
const int LogEntry::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvraft.LogEntry)
}

void LogEntry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  command_ = const_cast< ::kvraft::Op*>(&::kvraft::Op::default_instance());
}

LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvraft.LogEntry)
}

void LogEntry::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  command_ = NULL;
  term_ = 0;
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:kvraft.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntry_descriptor_;
}

const LogEntry& LogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvraft_2eproto();
  return *default_instance_;
}

LogEntry* LogEntry::default_instance_ = NULL;

LogEntry* LogEntry::New(::google::protobuf::Arena* arena) const {
  LogEntry* n = new LogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:kvraft.LogEntry)
  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
  command_ = NULL;
  term_ = 0;
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvraft.LogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvraft.Op Command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Term;
        break;
      }

      // optional int32 Term = 2;
      case 2: {
        if (tag == 16) {
         parse_Term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvraft.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvraft.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvraft.LogEntry)
  // optional .kvraft.Op Command = 1;
  if (this->has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->command_, output);
  }

  // optional int32 Term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->term(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvraft.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvraft.LogEntry)
  // optional .kvraft.Op Command = 1;
  if (this->has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->command_, false, target);
  }

  // optional int32 Term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvraft.LogEntry)
  return target;
}

int LogEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kvraft.LogEntry)
  int total_size = 0;

  // optional .kvraft.Op Command = 1;
  if (this->has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->command_);
  }

  // optional int32 Term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvraft.LogEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvraft.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvraft.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvraft.LogEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_command()) {
    mutable_command()->::kvraft::Op::MergeFrom(from.command());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvraft.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvraft.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {

  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  std::swap(command_, other->command_);
  std::swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntry_descriptor_;
  metadata.reflection = LogEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogEntry

// optional .kvraft.Op Command = 1;
bool LogEntry::has_command() const {
  return !_is_default_instance_ && command_ != NULL;
}
void LogEntry::clear_command() {
  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
  command_ = NULL;
}
const ::kvraft::Op& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:kvraft.LogEntry.Command)
  return command_ != NULL ? *command_ : *default_instance_->command_;
}
::kvraft::Op* LogEntry::mutable_command() {
  
  if (command_ == NULL) {
    command_ = new ::kvraft::Op;
  }
  // @@protoc_insertion_point(field_mutable:kvraft.LogEntry.Command)
  return command_;
}
::kvraft::Op* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:kvraft.LogEntry.Command)
  
  ::kvraft::Op* temp = command_;
  command_ = NULL;
  return temp;
}
void LogEntry::set_allocated_command(::kvraft::Op* command) {
  delete command_;
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvraft.LogEntry.Command)
}

// optional int32 Term = 2;
void LogEntry::clear_term() {
  term_ = 0;
}
 ::google::protobuf::int32 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:kvraft.LogEntry.Term)
  return term_;
}
 void LogEntry::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:kvraft.LogEntry.Term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteArgs::kTermFieldNumber;
const int RequestVoteArgs::kCandidateIdFieldNumber;
const int RequestVoteArgs::kLastLogIndexFieldNumber;
const int RequestVoteArgs::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteArgs::RequestVoteArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvraft.RequestVoteArgs)
}

void RequestVoteArgs::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestVoteArgs::RequestVoteArgs(const RequestVoteArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvraft.RequestVoteArgs)
}

void RequestVoteArgs::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  term_ = 0;
  candidateid_ = 0;
  lastlogindex_ = 0;
  lastlogterm_ = 0;
}

RequestVoteArgs::~RequestVoteArgs() {
  // @@protoc_insertion_point(destructor:kvraft.RequestVoteArgs)
  SharedDtor();
}

void RequestVoteArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVoteArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVoteArgs_descriptor_;
}

const RequestVoteArgs& RequestVoteArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvraft_2eproto();
  return *default_instance_;
}

RequestVoteArgs* RequestVoteArgs::default_instance_ = NULL;

RequestVoteArgs* RequestVoteArgs::New(::google::protobuf::Arena* arena) const {
  RequestVoteArgs* n = new RequestVoteArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestVoteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:kvraft.RequestVoteArgs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestVoteArgs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestVoteArgs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, lastlogterm_);

#undef ZR_HELPER_
#undef ZR_

}

bool RequestVoteArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvraft.RequestVoteArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CandidateId;
        break;
      }

      // optional int32 CandidateId = 2;
      case 2: {
        if (tag == 16) {
         parse_CandidateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidateid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LastLogIndex;
        break;
      }

      // optional int32 LastLogIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_LastLogIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LastLogTerm;
        break;
      }

      // optional int32 LastLogTerm = 4;
      case 4: {
        if (tag == 32) {
         parse_LastLogTerm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogterm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvraft.RequestVoteArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvraft.RequestVoteArgs)
  return false;
#undef DO_
}

void RequestVoteArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvraft.RequestVoteArgs)
  // optional int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // optional int32 CandidateId = 2;
  if (this->candidateid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->candidateid(), output);
  }

  // optional int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastlogindex(), output);
  }

  // optional int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastlogterm(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvraft.RequestVoteArgs)
}

::google::protobuf::uint8* RequestVoteArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvraft.RequestVoteArgs)
  // optional int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // optional int32 CandidateId = 2;
  if (this->candidateid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->candidateid(), target);
  }

  // optional int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastlogindex(), target);
  }

  // optional int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastlogterm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvraft.RequestVoteArgs)
  return target;
}

int RequestVoteArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kvraft.RequestVoteArgs)
  int total_size = 0;

  // optional int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // optional int32 CandidateId = 2;
  if (this->candidateid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->candidateid());
  }

  // optional int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogindex());
  }

  // optional int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogterm());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvraft.RequestVoteArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestVoteArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvraft.RequestVoteArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvraft.RequestVoteArgs)
    MergeFrom(*source);
  }
}

void RequestVoteArgs::MergeFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvraft.RequestVoteArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.candidateid() != 0) {
    set_candidateid(from.candidateid());
  }
  if (from.lastlogindex() != 0) {
    set_lastlogindex(from.lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    set_lastlogterm(from.lastlogterm());
  }
}

void RequestVoteArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvraft.RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteArgs::CopyFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvraft.RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteArgs::IsInitialized() const {

  return true;
}

void RequestVoteArgs::Swap(RequestVoteArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteArgs::InternalSwap(RequestVoteArgs* other) {
  std::swap(term_, other->term_);
  std::swap(candidateid_, other->candidateid_);
  std::swap(lastlogindex_, other->lastlogindex_);
  std::swap(lastlogterm_, other->lastlogterm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestVoteArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVoteArgs_descriptor_;
  metadata.reflection = RequestVoteArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestVoteArgs

// optional int32 Term = 1;
void RequestVoteArgs::clear_term() {
  term_ = 0;
}
 ::google::protobuf::int32 RequestVoteArgs::term() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteArgs.Term)
  return term_;
}
 void RequestVoteArgs::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteArgs.Term)
}

// optional int32 CandidateId = 2;
void RequestVoteArgs::clear_candidateid() {
  candidateid_ = 0;
}
 ::google::protobuf::int32 RequestVoteArgs::candidateid() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteArgs.CandidateId)
  return candidateid_;
}
 void RequestVoteArgs::set_candidateid(::google::protobuf::int32 value) {
  
  candidateid_ = value;
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteArgs.CandidateId)
}

// optional int32 LastLogIndex = 3;
void RequestVoteArgs::clear_lastlogindex() {
  lastlogindex_ = 0;
}
 ::google::protobuf::int32 RequestVoteArgs::lastlogindex() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteArgs.LastLogIndex)
  return lastlogindex_;
}
 void RequestVoteArgs::set_lastlogindex(::google::protobuf::int32 value) {
  
  lastlogindex_ = value;
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteArgs.LastLogIndex)
}

// optional int32 LastLogTerm = 4;
void RequestVoteArgs::clear_lastlogterm() {
  lastlogterm_ = 0;
}
 ::google::protobuf::int32 RequestVoteArgs::lastlogterm() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteArgs.LastLogTerm)
  return lastlogterm_;
}
 void RequestVoteArgs::set_lastlogterm(::google::protobuf::int32 value) {
  
  lastlogterm_ = value;
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteArgs.LastLogTerm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteReply::kTermFieldNumber;
const int RequestVoteReply::kVoteGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteReply::RequestVoteReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvraft.RequestVoteReply)
}

void RequestVoteReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestVoteReply::RequestVoteReply(const RequestVoteReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvraft.RequestVoteReply)
}

void RequestVoteReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  term_ = 0;
  votegranted_ = false;
}

RequestVoteReply::~RequestVoteReply() {
  // @@protoc_insertion_point(destructor:kvraft.RequestVoteReply)
  SharedDtor();
}

void RequestVoteReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVoteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVoteReply_descriptor_;
}

const RequestVoteReply& RequestVoteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvraft_2eproto();
  return *default_instance_;
}

RequestVoteReply* RequestVoteReply::default_instance_ = NULL;

RequestVoteReply* RequestVoteReply::New(::google::protobuf::Arena* arena) const {
  RequestVoteReply* n = new RequestVoteReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:kvraft.RequestVoteReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestVoteReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestVoteReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, votegranted_);

#undef ZR_HELPER_
#undef ZR_

}

bool RequestVoteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvraft.RequestVoteReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_VoteGranted;
        break;
      }

      // optional bool VoteGranted = 2;
      case 2: {
        if (tag == 16) {
         parse_VoteGranted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votegranted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvraft.RequestVoteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvraft.RequestVoteReply)
  return false;
#undef DO_
}

void RequestVoteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvraft.RequestVoteReply)
  // optional int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // optional bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->votegranted(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvraft.RequestVoteReply)
}

::google::protobuf::uint8* RequestVoteReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvraft.RequestVoteReply)
  // optional int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // optional bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->votegranted(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvraft.RequestVoteReply)
  return target;
}

int RequestVoteReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kvraft.RequestVoteReply)
  int total_size = 0;

  // optional int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // optional bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvraft.RequestVoteReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestVoteReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvraft.RequestVoteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvraft.RequestVoteReply)
    MergeFrom(*source);
  }
}

void RequestVoteReply::MergeFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvraft.RequestVoteReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.votegranted() != 0) {
    set_votegranted(from.votegranted());
  }
}

void RequestVoteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvraft.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteReply::CopyFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvraft.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReply::IsInitialized() const {

  return true;
}

void RequestVoteReply::Swap(RequestVoteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteReply::InternalSwap(RequestVoteReply* other) {
  std::swap(term_, other->term_);
  std::swap(votegranted_, other->votegranted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestVoteReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVoteReply_descriptor_;
  metadata.reflection = RequestVoteReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestVoteReply

// optional int32 Term = 1;
void RequestVoteReply::clear_term() {
  term_ = 0;
}
 ::google::protobuf::int32 RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteReply.Term)
  return term_;
}
 void RequestVoteReply::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteReply.Term)
}

// optional bool VoteGranted = 2;
void RequestVoteReply::clear_votegranted() {
  votegranted_ = false;
}
 bool RequestVoteReply::votegranted() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteReply.VoteGranted)
  return votegranted_;
}
 void RequestVoteReply::set_votegranted(bool value) {
  
  votegranted_ = value;
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteReply.VoteGranted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesArgs::kTermFieldNumber;
const int AppendEntriesArgs::kLeaderIdFieldNumber;
const int AppendEntriesArgs::kPrevLogIndexFieldNumber;
const int AppendEntriesArgs::kPrevLogTermFieldNumber;
const int AppendEntriesArgs::kLeaderCommitFieldNumber;
const int AppendEntriesArgs::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesArgs::AppendEntriesArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvraft.AppendEntriesArgs)
}

void AppendEntriesArgs::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppendEntriesArgs::AppendEntriesArgs(const AppendEntriesArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvraft.AppendEntriesArgs)
}

void AppendEntriesArgs::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  term_ = 0;
  leaderid_ = 0;
  prevlogindex_ = 0;
  prevlogterm_ = 0;
  leadercommit_ = 0;
}

AppendEntriesArgs::~AppendEntriesArgs() {
  // @@protoc_insertion_point(destructor:kvraft.AppendEntriesArgs)
  SharedDtor();
}

void AppendEntriesArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntriesArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesArgs_descriptor_;
}

const AppendEntriesArgs& AppendEntriesArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvraft_2eproto();
  return *default_instance_;
}

AppendEntriesArgs* AppendEntriesArgs::default_instance_ = NULL;

AppendEntriesArgs* AppendEntriesArgs::New(::google::protobuf::Arena* arena) const {
  AppendEntriesArgs* n = new AppendEntriesArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppendEntriesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:kvraft.AppendEntriesArgs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AppendEntriesArgs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AppendEntriesArgs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, prevlogterm_);
  leadercommit_ = 0;

#undef ZR_HELPER_
#undef ZR_

  entries_.Clear();
}

bool AppendEntriesArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvraft.AppendEntriesArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LeaderId;
        break;
      }

      // optional int32 LeaderId = 2;
      case 2: {
        if (tag == 16) {
         parse_LeaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PrevLogIndex;
        break;
      }

      // optional int32 PrevLogIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_PrevLogIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PrevLogTerm;
        break;
      }

      // optional int32 PrevLogTerm = 4;
      case 4: {
        if (tag == 32) {
         parse_PrevLogTerm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogterm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LeaderCommit;
        break;
      }

      // optional int32 LeaderCommit = 5;
      case 5: {
        if (tag == 40) {
         parse_LeaderCommit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadercommit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Entries;
        break;
      }

      // repeated .kvraft.LogEntry Entries = 6;
      case 6: {
        if (tag == 50) {
         parse_Entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_Entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvraft.AppendEntriesArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvraft.AppendEntriesArgs)
  return false;
#undef DO_
}

void AppendEntriesArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvraft.AppendEntriesArgs)
  // optional int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // optional int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderid(), output);
  }

  // optional int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prevlogindex(), output);
  }

  // optional int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prevlogterm(), output);
  }

  // optional int32 LeaderCommit = 5;
  if (this->leadercommit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leadercommit(), output);
  }

  // repeated .kvraft.LogEntry Entries = 6;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvraft.AppendEntriesArgs)
}

::google::protobuf::uint8* AppendEntriesArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvraft.AppendEntriesArgs)
  // optional int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // optional int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderid(), target);
  }

  // optional int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prevlogindex(), target);
  }

  // optional int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prevlogterm(), target);
  }

  // optional int32 LeaderCommit = 5;
  if (this->leadercommit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leadercommit(), target);
  }

  // repeated .kvraft.LogEntry Entries = 6;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvraft.AppendEntriesArgs)
  return target;
}

int AppendEntriesArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kvraft.AppendEntriesArgs)
  int total_size = 0;

  // optional int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // optional int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // optional int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogindex());
  }

  // optional int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogterm());
  }

  // optional int32 LeaderCommit = 5;
  if (this->leadercommit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leadercommit());
  }

  // repeated .kvraft.LogEntry Entries = 6;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvraft.AppendEntriesArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AppendEntriesArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvraft.AppendEntriesArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvraft.AppendEntriesArgs)
    MergeFrom(*source);
  }
}

void AppendEntriesArgs::MergeFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvraft.AppendEntriesArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entries_.MergeFrom(from.entries_);
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.prevlogindex() != 0) {
    set_prevlogindex(from.prevlogindex());
  }
  if (from.prevlogterm() != 0) {
    set_prevlogterm(from.prevlogterm());
  }
  if (from.leadercommit() != 0) {
    set_leadercommit(from.leadercommit());
  }
}

void AppendEntriesArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvraft.AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesArgs::CopyFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvraft.AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesArgs::IsInitialized() const {

  return true;
}

void AppendEntriesArgs::Swap(AppendEntriesArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesArgs::InternalSwap(AppendEntriesArgs* other) {
  std::swap(term_, other->term_);
  std::swap(leaderid_, other->leaderid_);
  std::swap(prevlogindex_, other->prevlogindex_);
  std::swap(prevlogterm_, other->prevlogterm_);
  std::swap(leadercommit_, other->leadercommit_);
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppendEntriesArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesArgs_descriptor_;
  metadata.reflection = AppendEntriesArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppendEntriesArgs

// optional int32 Term = 1;
void AppendEntriesArgs::clear_term() {
  term_ = 0;
}
 ::google::protobuf::int32 AppendEntriesArgs::term() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesArgs.Term)
  return term_;
}
 void AppendEntriesArgs::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesArgs.Term)
}

// optional int32 LeaderId = 2;
void AppendEntriesArgs::clear_leaderid() {
  leaderid_ = 0;
}
 ::google::protobuf::int32 AppendEntriesArgs::leaderid() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesArgs.LeaderId)
  return leaderid_;
}
 void AppendEntriesArgs::set_leaderid(::google::protobuf::int32 value) {
  
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesArgs.LeaderId)
}

// optional int32 PrevLogIndex = 3;
void AppendEntriesArgs::clear_prevlogindex() {
  prevlogindex_ = 0;
}
 ::google::protobuf::int32 AppendEntriesArgs::prevlogindex() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesArgs.PrevLogIndex)
  return prevlogindex_;
}
 void AppendEntriesArgs::set_prevlogindex(::google::protobuf::int32 value) {
  
  prevlogindex_ = value;
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesArgs.PrevLogIndex)
}

// optional int32 PrevLogTerm = 4;
void AppendEntriesArgs::clear_prevlogterm() {
  prevlogterm_ = 0;
}
 ::google::protobuf::int32 AppendEntriesArgs::prevlogterm() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesArgs.PrevLogTerm)
  return prevlogterm_;
}
 void AppendEntriesArgs::set_prevlogterm(::google::protobuf::int32 value) {
  
  prevlogterm_ = value;
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesArgs.PrevLogTerm)
}

// optional int32 LeaderCommit = 5;
void AppendEntriesArgs::clear_leadercommit() {
  leadercommit_ = 0;
}
 ::google::protobuf::int32 AppendEntriesArgs::leadercommit() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesArgs.LeaderCommit)
  return leadercommit_;
}
 void AppendEntriesArgs::set_leadercommit(::google::protobuf::int32 value) {
  
  leadercommit_ = value;
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesArgs.LeaderCommit)
}

// repeated .kvraft.LogEntry Entries = 6;
int AppendEntriesArgs::entries_size() const {
  return entries_.size();
}
void AppendEntriesArgs::clear_entries() {
  entries_.Clear();
}
const ::kvraft::LogEntry& AppendEntriesArgs::entries(int index) const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesArgs.Entries)
  return entries_.Get(index);
}
::kvraft::LogEntry* AppendEntriesArgs::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:kvraft.AppendEntriesArgs.Entries)
  return entries_.Mutable(index);
}
::kvraft::LogEntry* AppendEntriesArgs::add_entries() {
  // @@protoc_insertion_point(field_add:kvraft.AppendEntriesArgs.Entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvraft::LogEntry >*
AppendEntriesArgs::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:kvraft.AppendEntriesArgs.Entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::kvraft::LogEntry >&
AppendEntriesArgs::entries() const {
  // @@protoc_insertion_point(field_list:kvraft.AppendEntriesArgs.Entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesReply::kTermFieldNumber;
const int AppendEntriesReply::kSuccessFieldNumber;
const int AppendEntriesReply::kReplicatedIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesReply::AppendEntriesReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvraft.AppendEntriesReply)
}

void AppendEntriesReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvraft.AppendEntriesReply)
}

void AppendEntriesReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  term_ = 0;
  success_ = false;
  replicatedindex_ = 0;
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:kvraft.AppendEntriesReply)
  SharedDtor();
}

void AppendEntriesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntriesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesReply_descriptor_;
}

const AppendEntriesReply& AppendEntriesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvraft_2eproto();
  return *default_instance_;
}

AppendEntriesReply* AppendEntriesReply::default_instance_ = NULL;

AppendEntriesReply* AppendEntriesReply::New(::google::protobuf::Arena* arena) const {
  AppendEntriesReply* n = new AppendEntriesReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:kvraft.AppendEntriesReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AppendEntriesReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AppendEntriesReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, replicatedindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool AppendEntriesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvraft.AppendEntriesReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Success;
        break;
      }

      // optional bool Success = 2;
      case 2: {
        if (tag == 16) {
         parse_Success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReplicatedIndex;
        break;
      }

      // optional int32 ReplicatedIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_ReplicatedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicatedindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvraft.AppendEntriesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvraft.AppendEntriesReply)
  return false;
#undef DO_
}

void AppendEntriesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvraft.AppendEntriesReply)
  // optional int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // optional bool Success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional int32 ReplicatedIndex = 3;
  if (this->replicatedindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replicatedindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvraft.AppendEntriesReply)
}

::google::protobuf::uint8* AppendEntriesReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvraft.AppendEntriesReply)
  // optional int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // optional bool Success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional int32 ReplicatedIndex = 3;
  if (this->replicatedindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->replicatedindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvraft.AppendEntriesReply)
  return target;
}

int AppendEntriesReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kvraft.AppendEntriesReply)
  int total_size = 0;

  // optional int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // optional bool Success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 ReplicatedIndex = 3;
  if (this->replicatedindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replicatedindex());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvraft.AppendEntriesReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AppendEntriesReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvraft.AppendEntriesReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvraft.AppendEntriesReply)
    MergeFrom(*source);
  }
}

void AppendEntriesReply::MergeFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvraft.AppendEntriesReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.replicatedindex() != 0) {
    set_replicatedindex(from.replicatedindex());
  }
}

void AppendEntriesReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvraft.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvraft.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {

  return true;
}

void AppendEntriesReply::Swap(AppendEntriesReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  std::swap(term_, other->term_);
  std::swap(success_, other->success_);
  std::swap(replicatedindex_, other->replicatedindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppendEntriesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesReply_descriptor_;
  metadata.reflection = AppendEntriesReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppendEntriesReply

// optional int32 Term = 1;
void AppendEntriesReply::clear_term() {
  term_ = 0;
}
 ::google::protobuf::int32 AppendEntriesReply::term() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesReply.Term)
  return term_;
}
 void AppendEntriesReply::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesReply.Term)
}

// optional bool Success = 2;
void AppendEntriesReply::clear_success() {
  success_ = false;
}
 bool AppendEntriesReply::success() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesReply.Success)
  return success_;
}
 void AppendEntriesReply::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesReply.Success)
}

// optional int32 ReplicatedIndex = 3;
void AppendEntriesReply::clear_replicatedindex() {
  replicatedindex_ = 0;
}
 ::google::protobuf::int32 AppendEntriesReply::replicatedindex() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesReply.ReplicatedIndex)
  return replicatedindex_;
}
 void AppendEntriesReply::set_replicatedindex(::google::protobuf::int32 value) {
  
  replicatedindex_ = value;
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesReply.ReplicatedIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace kvraft

// @@protoc_insertion_point(global_scope)
